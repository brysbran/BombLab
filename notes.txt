phase 1
----------------------
-used objdump and it was out in the open

phase 2
----------------------
- fibonacci sequence, calls recursively to compare if the given int is correct


phase 3 notes
-----------------------
- first number must be greater than length 2
	testing used 3, which is greater than length 2
	-(gdb) p /x $eax
		$1 = 0x3
-expecting char for 2nd piece
 	- skips char for 2nd case but comes back to it at the end
 	- char is stored in %al, which is least sig byte of %rax
 	- when call x/1d $al gives 0x76, which converting from hex
  	  to char is "v"
-expecting number for 3rd piece
 	- 866

phase 4
----------------------

- firstly by searching "x/s 0x5555555572ef" returns "%d %d" given by one of the comments
out to the side this tells me the answer format is "int int"
- the first "cmp" compares if there are two given ints and if so, it falls
though the bomb call to the next comparison
- Also checks to see if the first int is length 0-14
- After phase 4
- Essentially inside function 4 the program is calculating three fields, which
we dont know yet
- inside rbx is held low + (high - low) / 2 or the average
- this gets compared to our first input and then does the greater than or less than comparisons
- and either does (x, low, average - 1) + average or (x, low, average + 1) + average
- if our first number is the average then the average is returned

phase 5
-----------------------
- takes in a string of length 6
- calls function strings_not_equal
- calling "x/6c $rbx" shows where the input string is stored
- this phase is looking for the word "flames" before it is put through
the cypher to change the letters
- a lot of trial and error inputting strings like "abcdef" etc to map the letters

a- a    b-d     c-u    d-i    e-e    f-r   g-s    h-n    i-f    j-o     k-t     l-v     m-b     n-y    o-l     p-m     q-a     r-d
s-u      t-i      u-e     v-r     w-s     x-n     y-f     z-o

you end up with "yoapeg"



#################
# GENERAL NOTES #
#################

- to find value in register with an offset, "x/1d $rsp+12" for "0xc(%rsp)



